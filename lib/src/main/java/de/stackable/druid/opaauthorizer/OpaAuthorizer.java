/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.stackable.druid.opaauthorizer;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import de.stackable.druid.opaauthorizer.opatypes.OpaMessage;
import de.stackable.druid.opaauthorizer.opatypes.OpaResponse;
import org.apache.druid.server.security.*;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.HttpEntity;
import org.apache.hc.core5.http.ParseException;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.druid.java.util.common.logger.Logger;

import java.io.IOException;

@JsonTypeName("opa")
public class OpaAuthorizer implements Authorizer {
    private static final Logger log = new Logger(OpaAuthorizer.class);
    private final String name;
    private final String opaUri;
    private final ObjectMapper objectMapper;

    @JsonCreator
    public OpaAuthorizer(
        @JsonProperty("name") String name,
        @JsonProperty("opaUri") String opaUri
    ) {
        this.name = name;
        this.opaUri = opaUri;
        this.objectMapper = new ObjectMapper();
    }

    @Override
    public Access authorize(AuthenticationResult authenticationResult, Resource resource, Action action) {
        log.debug(
                "Authorizing %s for %s on %s (%s)",
                authenticationResult.getIdentity(),
                action.name(),
                resource.getName(),
                resource.getType().name()
        );
        log.trace("Creating OPA request JSON.");
        OpaMessage msg = new OpaMessage(
                authenticationResult.getIdentity(),
                action.name(),
                resource.getName(),
                resource.getType().toString()
        );
        String msgJson;
        try {
            msgJson = this.objectMapper.writeValueAsString(msg);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            return new Access(false, "Failed to create the OPA request JSON.");
        }
        log.trace("Preparing HTTP post.");
        HttpPost httpPost = new HttpPost(this.opaUri);
        StringEntity requestEntity = new StringEntity(msgJson, ContentType.APPLICATION_JSON);
        httpPost.setEntity(requestEntity);

        log.trace("Creating HTTP Client and executing post.");
        try (CloseableHttpClient httpclient = HttpClients.createDefault()) {
            try (CloseableHttpResponse response = httpclient.execute(httpPost)) {
                log.debug("OPA Response code: %s - %s", response.getCode(), response.getReasonPhrase());
                HttpEntity entity = response.getEntity();
                log.trace("Parsing OPA response.");
                String responseString = EntityUtils.toString(entity);
                OpaResponse opaResponse = this.objectMapper.readValue(responseString, OpaResponse.class);
                if (opaResponse.result) {
                    return Access.OK;
                } else {
                    return new Access(false, "Access denied.");
                }
            }
        } catch (IOException | ParseException e) {
            // TODO
            e.printStackTrace();
        }

        return new Access(false, "An Error occured");
    }
}
